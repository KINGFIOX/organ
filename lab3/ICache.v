// Generated by CIRCT firtool-1.62.0
// external module blk_mem_gen_1

module ICache(
  input          clock,
                 reset,
                 io_inst_rreq,
  input  [31:0]  io_inst_addr,
  output         io_inst_valid,
  output [31:0]  io_inst_out,
  output [3:0]   io_mem_ren,
  output [31:0]  io_mem_raddr,
  input  [127:0] io_mem_rdata,
  input          io_mem_rrdy,
                 io_mem_rvalid,
  output         io_hit
);

  wire [127:0]     _dataSram_douta;
  wire [127:0]     _tagSram_douta;
  reg  [2:0]       state;
  wire             _GEN = state == 3'h0;
  wire             _GEN_0 = state == 3'h1;
  wire             _GEN_1 = _tagSram_douta[23:0] == {1'h1, io_inst_addr[31:9]};
  wire             io_hit_0 = ~_GEN & _GEN_0 & _GEN_1;
  wire [3:0][31:0] _GEN_2 =
    {{_dataSram_douta[127:96]},
     {_dataSram_douta[95:64]},
     {_dataSram_douta[63:32]},
     {_dataSram_douta[31:0]}};
  wire             _GEN_3 = state == 3'h2;
  wire             _GEN_4 = state == 3'h3;
  wire             _GEN_5 = state == 3'h4;
  wire             _GEN_6 = ~(_GEN | _GEN_0 | _GEN_3 | _GEN_4) & _GEN_5 & io_mem_rvalid;
  wire [5:0]       _GEN_7 = {1'h0, io_inst_addr[8:4]};
  always @(posedge clock) begin
    if (reset)
      state <= 3'h0;
    else if (_GEN) begin
      if (io_inst_rreq)
        state <= 3'h1;
    end
    else if (_GEN_0)
      state <= {1'h0, ~_GEN_1, 1'h0};
    else if (_GEN_3)
      state <= io_mem_rrdy ? 3'h4 : 3'h3;
    else if (_GEN_4) begin
      if (io_mem_rrdy)
        state <= 3'h4;
    end
    else if (_GEN_5 & io_mem_rvalid)
      state <= 3'h1;
  end // always @(posedge)
  blk_mem_gen_1 tagSram (
    .clka  (clock),
    .wea   (_GEN_6),
    .addra (_GEN_7),
    .dina  ({105'h1, io_inst_addr[31:9]}),
    .douta (_tagSram_douta)
  );
  blk_mem_gen_1 dataSram (
    .clka  (clock),
    .wea   (_GEN_6),
    .addra (_GEN_7),
    .dina  (io_mem_rdata),
    .douta (_dataSram_douta)
  );
  assign io_inst_valid = io_hit_0;
  assign io_inst_out = _GEN_2[io_inst_addr[3:2]];
  assign io_mem_ren =
    _GEN | _GEN_0 ? 4'h0 : _GEN_3 ? {4{io_mem_rrdy}} : {4{_GEN_4 & io_mem_rrdy}};
  assign io_mem_raddr = {io_inst_addr[31:4], 4'h0};
  assign io_hit = io_hit_0;
endmodule

