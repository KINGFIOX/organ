// Generated by CIRCT firtool-1.62.0
// external module blk_mem_gen_1

module DCache(
  input          clock,
                 reset,
  input  [31:0]  io_data_addr,
  input  [3:0]   io_data_ren,
  output [31:0]  io_data_rdata,
  output         io_data_valid,
  input  [3:0]   io_data_wen,
  input  [31:0]  io_data_wdata,
  output         io_data_wresp,
  input          io_dev_wrdy,
  output [3:0]   io_dev_wen,
  output [31:0]  io_dev_waddr,
                 io_dev_wdata,
  input          io_dev_rrdy,
  output [3:0]   io_dev_ren,
  output [31:0]  io_dev_raddr,
  input          io_dev_rvalid,
  input  [127:0] io_dev_rdata,
  output         io_hit_r,
                 io_hit_w
);

  wire [3:0] io_dev_wen_0;
  reg  [1:0] r_state;
  wire       _GEN = r_state == 2'h0;
  wire       _GEN_0 = r_state == 2'h1;
  wire       _GEN_1 = r_state == 2'h2;
  reg  [3:0] ren_r;
  wire       _GEN_2 = _GEN & (|io_data_ren);
  wire       _GEN_3 = _GEN | _GEN_0;
  reg  [1:0] w_state;
  reg  [3:0] wen_r;
  wire       wr_resp = io_dev_wrdy & io_dev_wen_0 == 4'h0;
  wire       _GEN_4 = w_state == 2'h0;
  wire       _GEN_5 = w_state == 2'h1;
  wire       _GEN_6 = _GEN_4 & (|io_data_wen);
  assign io_dev_wen_0 =
    _GEN_4
      ? ((|io_data_wen) & io_dev_rrdy ? io_data_wen : 4'h0)
      : _GEN_5 & (io_dev_rrdy | io_dev_wrdy) ? wen_r : 4'h0;
  always @(posedge clock) begin
    if (reset) begin
      r_state <= 2'h0;
      ren_r <= 4'h0;
      w_state <= 2'h0;
      wen_r <= 4'h0;
    end
    else begin
      automatic logic [3:0][1:0] _GEN_7 =
        {{r_state},
         {{~io_dev_rvalid, 1'h0}},
         {io_dev_rrdy ? 2'h2 : 2'h1},
         {(|io_data_ren) ? (io_dev_rrdy ? 2'h1 : 2'h2) : 2'h0}};
      automatic logic [3:0][1:0] _GEN_8 =
        {{w_state},
         {{~wr_resp, 1'h0}},
         {io_dev_wrdy ? 2'h2 : 2'h1},
         {(|io_data_wen) ? (io_dev_wrdy ? 2'h2 : 2'h1) : 2'h0}};
      r_state <= _GEN_7[r_state];
      if (~_GEN_2 | io_dev_rrdy) begin
      end
      else
        ren_r <= io_data_ren;
      w_state <= _GEN_8[w_state];
      if (~_GEN_6 | io_dev_rrdy) begin
      end
      else
        wen_r <= io_data_wen;
    end
  end // always @(posedge)
  blk_mem_gen_1 tagSram (
    .clka  (clock),
    .wea   (1'h0),
    .addra (6'h0),
    .dina  (128'h0),
    .douta (/* unused */)
  );
  blk_mem_gen_1 U_dsram (
    .clka  (clock),
    .wea   (1'h0),
    .addra (6'h0),
    .dina  (128'h0),
    .douta (/* unused */)
  );
  assign io_data_rdata = _GEN_3 | ~(_GEN_1 & io_dev_rvalid) ? 32'h0 : io_dev_rdata[31:0];
  assign io_data_valid = ~_GEN_3 & _GEN_1 & io_dev_rvalid;
  assign io_data_wresp = ~(_GEN_4 | _GEN_5) & w_state == 2'h2 & wr_resp;
  assign io_dev_wen = io_dev_wen_0;
  assign io_dev_waddr = _GEN_6 ? io_data_addr : 32'h0;
  assign io_dev_wdata = _GEN_6 ? io_data_wdata : 32'h0;
  assign io_dev_ren =
    _GEN
      ? ((|io_data_ren) & io_dev_rrdy ? io_data_ren : 4'h0)
      : _GEN_0 & io_dev_rrdy ? ren_r : 4'h0;
  assign io_dev_raddr = _GEN_2 ? io_data_addr : 32'h0;
  assign io_hit_r = 1'h0;
  assign io_hit_w = 1'h0;
endmodule

