// Generated by CIRCT firtool-1.62.0
// external module blk_mem_gen_1

module ICache(
  input          clock,
                 reset,
                 io_inst_rreq,
  input  [31:0]  io_inst_addr,
  output         io_inst_valid,
  output [31:0]  io_inst_out,
  output [3:0]   io_mem_ren,
  output [31:0]  io_mem_raddr,
  input  [127:0] io_mem_rdata,
  input          io_mem_rrdy,
                 io_mem_rvalid,
  output         io_hit
);

  wire [127:0]     _dataSram_douta;
  wire [127:0]     _tagSram_douta;
  wire [5:0]       _GEN = {1'h0, io_inst_addr[8:4]};
  reg  [1:0]       state;
  wire             _GEN_0 = state == 2'h0;
  wire             _GEN_1 = state == 2'h1;
  wire             _GEN_2 = _tagSram_douta[23:0] == {1'h1, io_inst_addr[31:9]};
  wire             io_hit_0 = ~_GEN_0 & _GEN_1 & _GEN_2;
  wire [3:0][31:0] _GEN_3 =
    {{_dataSram_douta[127:96]},
     {_dataSram_douta[95:64]},
     {_dataSram_douta[63:32]},
     {_dataSram_douta[31:0]}};
  wire             _GEN_4 = state == 2'h2;
  wire             _GEN_5 = ~(_GEN_0 | _GEN_1 | _GEN_4) & (&state) & io_mem_rvalid;
  always @(posedge clock) begin
    if (reset)
      state <= 2'h0;
    else begin
      automatic logic [3:0][1:0] _GEN_6 =
        {{(&state) & io_mem_rvalid ? 2'h1 : state},
         {io_mem_rrdy ? 2'h3 : state},
         {{~_GEN_2, 1'h0}},
         {io_inst_rreq ? 2'h1 : state}};
      state <= _GEN_6[state];
    end
  end // always @(posedge)
  blk_mem_gen_1 tagSram (
    .clka  (clock),
    .wea   (_GEN_5),
    .addra (_GEN),
    .dina  ({105'h1, io_inst_addr[31:9]}),
    .douta (_tagSram_douta)
  );
  blk_mem_gen_1 dataSram (
    .clka  (clock),
    .wea   (_GEN_5),
    .addra (_GEN),
    .dina  (io_mem_rdata),
    .douta (_dataSram_douta)
  );
  assign io_inst_valid = io_hit_0;
  assign io_inst_out = _GEN_3[io_inst_addr[3:2]];
  assign io_mem_ren = _GEN_0 | _GEN_1 ? 4'h0 : {4{_GEN_4 & io_mem_rrdy}};
  assign io_mem_raddr = {io_inst_addr[31:4], 4'h0};
  assign io_hit = io_hit_0;
endmodule

