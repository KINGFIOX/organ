// Generated by CIRCT firtool-1.62.0
module Divider(
  input         clock,
                reset,
  input  [31:0] io_x,
                io_y,
  input         io_start,
  output [31:0] io_z,
                io_r,
  output        io_busy
);

  reg [30:0] quotient;
  reg        quotient_sign;
  reg        remain_sign;
  reg [61:0] remain;
  reg [4:0]  cnt_value;
  reg [61:0] extend_y;
  reg        busy;
  reg        state;
  always @(posedge clock) begin
    automatic logic _GEN;
    _GEN = ~state & io_start;
    if (reset) begin
      quotient <= 31'h0;
      remain_sign <= 1'h0;
      remain <= 62'h0;
      cnt_value <= 5'h0;
      extend_y <= 62'h0;
      busy <= 1'h0;
      state <= 1'h0;
    end
    else begin
      automatic logic wrap;
      wrap = cnt_value == 5'h1E;
      if (state) begin
        automatic logic [61:0] _GEN_0 = {remain[60:0], 1'h0};
        automatic logic [61:0] _wire_cal_T_2;
        automatic logic [61:0] _wire_cal_T_4;
        _wire_cal_T_2 = _GEN_0 + extend_y;
        _wire_cal_T_4 = _GEN_0 - extend_y;
        if (~state | wrap) begin
        end
        else
          quotient <=
            {quotient[29:0], ~(remain[61] ? _wire_cal_T_2[61] : _wire_cal_T_4[61])};
        if (wrap) begin
          if (remain[61])
            remain <= remain + extend_y;
          cnt_value <= 5'h0;
        end
        else begin
          if (remain[61])
            remain <= _wire_cal_T_2;
          else
            remain <= _wire_cal_T_4;
          cnt_value <= cnt_value + 5'h1;
        end
        state <= ~wrap;
      end
      else begin
        if (io_start) begin
          automatic logic [61:0] _wire_cal_T =
            {31'h0, io_x[30:0]} - {1'h0, io_y[30:0], 30'h0};
          quotient <= {30'h0, ~(_wire_cal_T[61])};
          remain <= _wire_cal_T;
        end
        state <= io_start | state;
      end
      if (_GEN) begin
        remain_sign <= io_x[31];
        extend_y <= {1'h0, io_y[30:0], 30'h0};
      end
      busy <= state & (state ? ~wrap : busy);
    end
    if (_GEN)
      quotient_sign <= io_x[31] ^ io_y[31];
  end // always @(posedge)
  assign io_z = {quotient_sign, quotient};
  assign io_r = {remain_sign, remain[60:30]};
  assign io_busy = busy;
endmodule

